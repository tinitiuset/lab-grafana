<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Deploying our first Application" id="Deploying-our-first-Application">

    <p>
        This articles sole purpose is to deploy a sample application, so we can generate data
        for our observability tools.
    </p>
    <note>
        <p>
            This article will be based around the 42 Philosophers project, which is a project
            that simulates the dining philosophers problem.
        </p>
    </note>

    <chapter title="Containerizing Philosophers" id="containerizing-philosophers">
        <p>
            We will be using Docker to containerize our application, so we can deploy multiple instances
            of it simply.
        </p>
        <procedure>
            <step>
                <p>
                    First, we need to create a Dockerfile, which will be used to build our image.
                </p>
                <p>
                    Create a file named <code>Dockerfile</code> in the <code>lab-grafana/utilities/philo</code> directory.
                </p>
                <p>
                    Add the following content to the file:
                </p>
                <code-block lang="docker">
                    FROM ubuntu:latest

                    RUN apt-get update &amp;&amp; apt-get install -y \
                    --no-install-recommends \
                    git \
                    build-essential \
                    ca-certificates \
                    pwgen \
                    &amp;&amp; \
                    apt-get clean &amp;&amp; \
                    rm -rf /var/lib/apt/lists/*

                    RUN git clone "https://github.com/tinitiuset/philosophers.git" /usr/local/bin/philo

                    RUN make -C /usr/local/bin/philo/philo

                    RUN chmod a+x /usr/local/bin/philo/philo/philo

                    ENV PATH="/usr/local/bin/philo/philo:$PATH"

                    ENV PHILO_ARGS=""

                    ENTRYPOINT philo $PHILO_ARGS | tee -a /var/log/philo/philo-$(pwgen 5).log
                </code-block>
            </step>
            <step>
                <p>
                    Now we need to build our image.
                </p>
                <p>
                    Run the following command in <code>lab-grafana/utilities/philo</code>:
                </p>
                <code-block lang="bash">
                    docker build -t philo .
                </code-block>
            </step>
            <step>
                <p>
                    Now we need to run our container.
                </p>
                <p>
                    Run the following command in <code>lab-grafana/utilities/philo</code>:
                </p>
                <code-block lang="bash">
                    docker run --rm -it -e PHILO_ARGS="5 800 200 200" philo
                </code-block>
                <tip>
                    <p>
                        You can change PHILO_ARGS to change the number of philosophers,
                        the time they eat, sleep and think. Give it a try!
                    </p>
                </tip>
            </step>
            <step>
                <p>
                    A docker-compose file is also provided in <code>lab-grafana/utilities/philo</code>,
                    which can be used to run multiple instances of the application. Logs will be written
                    to <code>lab-grafana/data/philo/</code> so Promtail can scrape them.
                </p>
                <p>
                    Run the following command in <code>lab-grafana/utilities/philo</code>:
                </p>
                <code-block lang="bash">
                    docker-compose up
                </code-block>

            </step>
        </procedure>

    </chapter>

    <seealso>
        <!--Give some related links to how-to articles-->
    </seealso>
</topic>
