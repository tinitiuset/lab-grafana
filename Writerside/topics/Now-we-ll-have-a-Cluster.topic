<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Now we&apos;ll have a Cluster" id="Now-we-ll-have-a-Cluster">

    <p>
        Up until now, we have been working with a single node. In this tutorial, we will create
        a cluster of nodes. Using a single node can be useful for testing and development purposes,
        but we want to understand how these tools can be used in a production environment.
    </p>

    <chapter title="Observer Observee architecure" id="architecure">
        <p>
            We will then have two types of hosts:
        </p>

        <list>
            <li>1 Oberver</li>
            <li>X Observees</li>
        </list>

        <p>
            This architecture will allow us to observe multiple hosts from a single Grafana instance.
            Also, we would not want to install Grafana, Loki and Prometheus on every host we want to monitor.
            Installing these tools on every host would be a waste of resources and would add a lot of
            overhead and complexity to our infrastructure.
        </p>

        <img src="Cluster.png" alt="Cluster architecture"/>
    </chapter>

    <chapter title="On the Observer host" id="observer-setup">

        <p>
            The observer host will be the one that will host Grafana, Loki and Prometheus.
        </p>

        <p>
            Prometheus is a scraper, that means it will be responsible to scrape metrics from
            the observees. Therefore, we need to configure it to know where to find the observees.
        </p>
        <procedure>
            <step>
                <p>
                    Open the <code>lab-grafana/resources/prometheus.yml</code> file in your favorite editor.
                </p>
                <tip>
                    If you are using the terminal, you can use the <code>nano</code> editor instead of <code>vim</code>.
                </tip>
            </step>
            <step>
                <p>
                    We will be editing the <code>scrape_configs</code> section of the file:
                </p>
                <code-block lang="yaml">
                    - job_name: "node_exporter"
                    static_configs:
                    - targets: ["node-exporter:9100"]

                    - job_name: "cadvisor"
                    static_configs:
                    - targets: ["cadvisor:8080"]
                </code-block>
            </step>
            <step>
            <p>
                As every of our observees will be running a <code>node-exporter</code> and a <code>cadvisor</code>,
                we will need to add them to the list of targets:
            </p>
            <code-block lang="yaml">
                - job_name: "node_exporter"
                static_configs:
                - targets: ["node-exporter:9100", "observee1:9100", "observee2:9100", "observeeX:9100"]

                - job_name: "cadvisor"
                static_configs:
                - targets: ["cadvisor:8080", "observee1:8080", "observee2:8080", "observeeX:8080"]
            </code-block>
            <p>
                Replace <code>observee1</code>, <code>observee2</code> and <code>observeeX</code> with the
                IP adresses of your observees.
            </p>
            </step>
            <step>
                <p>
                    Save the file and exit your editor.
                </p>
            </step>
            <step>
                <p>
                    Restart the Prometheus container:
                </p>
                <code-block lang="bash">
                    docker restart prometheus
                </code-block>
            </step>
            <step>
                <p>
                    Open the Prometheus web interface at <code>http://localhost:9090</code>.
                </p>
                <p>
                    You should see the <code>node_exporter</code> and <code>cadvisor</code>
                    targets in the <code>Targets</code> page.
                    If you don't see them, wait a few seconds and refresh the page, scraping
                    might take a few seconds.
                </p>
            </step>
        </procedure>
    </chapter>

    <chapter title="On the Observee hosts" id="observee-setup">
        <p>
            The observee hosts will be the ones that will be monitored by the observer.
            They will be running <code>node-exporter</code>, <code>cadvisor</code>
            and <code>promtail</code> services.
        </p>

        <p>
            We will need to configure <code>promtail</code> to send logs to the observer
            as <code>promtail</code> is the agent that will be responsible to send logs
            to Loki.
        </p>
        <procedure>
            <step>
                <p>
                    Open the <code>lab-grafana/resources/promtail.yml</code> file in your favorite editor.
                </p>
                <tip>
                    If you are using the terminal, you can use the <code>nano</code> editor instead of <code>vim</code>.
                </tip>
            </step>
            <step>
                <p>
                    We will be editing the <code>clients</code> section of the file:
                </p>
                <code-block lang="yaml">
                    clients:
                    - url: http://localhost:3100/loki/api/v1/push
                </code-block>
            </step>
            <step>
                <p>
                    Replace <code>localhost</code> with the IP address of your observer.
                </p>
            </step>
            <step>
                <p>
                    Save the file and exit your editor.
                </p>
            </step>
            <step>
                <p>
                    Restart the <code>promtail</code> container:
                </p>
                <code-block lang="bash">
                    docker restart promtail
                </code-block>
            </step>
            <step>
                <p>
                    As an Observee, we will no longer need Grafana, Loki, Prometheus and Blackbox services up.
                    We will stop them:
                </p>
                <code-block lang="bash">
                    docker stop grafana loki prometheus blackbox
                </code-block>
            </step>
            <step>
                <p>
                    We would now be ready to deploy our application on the observee hosts.
                </p>
            </step>
        </procedure>
    </chapter>

    <chapter title="What you've learned" id="what-learned">
        <p>
            At this point, you should understand how a cluster of nodes can be observed by a single
            Grafana instance. This is the architecture that is commonly used in production environments.
        </p>
    </chapter>

    <seealso>
        <category ref="external">
                
        </category>
    </seealso>
</topic>
